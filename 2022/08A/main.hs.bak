module Main where

import Data.Char (digitToInt)
import Data.List (transpose)

type Case = [[Int]]

type Soln = Int

main :: IO ()
main = interact process

process :: String -> String
process = showSoln . solve . readCase

readCase :: String -> Case
readCase = map (map digitToInt) . lines

showSoln :: Soln -> String
showSoln = unlines . return . show

solve :: Case -> Soln
solve xss = length $ filter id $ concat pss
  where
    lss = map (scanl max minBound . init) xss
    rss = map (scanr max minBound . tail) xss
    uss = transpose $ map (scanl max minBound . init) $ transpose xss
    dss = transpose $ map (scanr max minBound . tail) $ transpose xss
    tss = foldl1 ((zipWith . zipWith) min) [lss, rss, uss, dss]
    pss = (zipWith . zipWith) (>) xss tss
